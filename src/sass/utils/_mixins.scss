// код взят из внешнего источника находится в отдельном
// парселе и подключен здесь. Округляет числа после деления до двух
// знаков после запятой.
@import './decimals';

// container mixin
// миксин для контейнера, по умолчанию применяются
// размеры и отступы мобильной версии и медиа-правила для
// таблетки и десктоп.
@mixin container($w: 480px, $mar: 0 auto, $pad: 0 20px) {
  @if $w {
    max-width: $w;

    @media screen and(min-width: 768px) {
      max-width: 768px;
      padding: 0 32px;
    }

    @media screen and(min-width: 1200px) {
      max-width: 1200px;
      padding: 0 16px;
    }
  }

  @if $mar {
    margin: $mar;
  }

  @if $pad {
    padding: $pad;
  }
}
// пример применения:

// .products__container {
//   @include container;
//   text-align: center;
// }

// section ident mixin
// миксин для отступов вертикальных отступов между секциями.
// по умолчанию задан паддинг-топ 60 пикселей, паддинг-боттом
// равен верхнему. При необходимости можно менять только верхний
// если отступы равны или оба по отдельности, если отступы отличаются.
@mixin section-indent($pt: 60px, $pb: $pt) {
  padding-top: $pt;
  padding-bottom: $pb;
}

//flex mixin
// миксин для флексов. По умолчанию заданы display: flex,
// align-items: center, justify-content: center их как и все остальные
// можно менять по необходимости.
@mixin flex(
  $dsp: flex,
  $fw: false,
  $fd: false,
  $ai: center,
  $jc: center,
  $indent: false
) {
  @if $dsp {
    display: $dsp;
  }
  @if $fw {
    flex-wrap: $fw;
  }
  @if $fd {
    flex-direction: $fd;
  }
  @if $ai {
    align-items: $ai;
  }
  @if $jc {
    justify-content: $jc;
  }
  @if $indent {
    gap: $indent;
  }
}
// пример применения:
// @include flex($fd: column, $indent: 20px);
// элементы встанут друг под другом с отступами между ними в 20 пикселей.

// position absolute mixin
// миксин для абсолютного позиционирования элементов. Присутствует опция
// позиционировать элемент по центру задав значение center.
@mixin position(
  $pos: absolute,
  $top: false,
  $right: false,
  $bot: false,
  $left: false
) {
  @if $pos {
    @if $pos == 'center' {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    } @else {
      position: $pos;
    }
  }

  @if $top {
    top: $top;
  }

  @if $right {
    right: $right;
  }

  @if $bot {
    bottom: $bot;
  }

  @if $left {
    left: $left;
  }
}
// пример применения:
// @include position($top: 0, $left: 0);
// элемент позиционируется в левом верхнем углу блока у которого
// position не static или относительно body если у всех других элементов
// position: static (применяется по умолчанию).

// grid+flex-basis mixin
// миксин для сетки элементов с опцией задавать количества элементов
// для расчета размеров по формуле (flex-basis). По умолчанию задан
// один элемент, отступы между рядами (по вертикали) 32 пикселя, отступ
// между столбцами (по горизонтали) равен отступу по вертикали.
// Все значения можно менять точечно. миксин
// применяется к блоку в котором должны быть элементы с классом который
// заканчивается на __item как правило это элементы списка.
@mixin card-set($items: 1, $indentX: 32px, $indentY: $indentX) {
  display: flex;
  flex-wrap: wrap;
  gap: $indentX $indentY;

  & > [class*='__item'] {
    flex-basis: calc((100% - $indentY * ($items - 1)) / $items);
  }
}
// пример применения:
// @include card-set(3, 168px, 29px);
// в этом примере в ряд будут располагаться три элемента с отступом
// между друг другом в 29 пикселей по горизонтали и 168 пикселей по вертикали.

// библиотека точек перелома для миксина медиа запросов
$breakpoints: (
  'phone': 480px,
  'tablet': 768px,
  'desktop': 1200px,
  'retina': 'retina',
  // применяется при добавлении images для ретина дисплеев.
);
// миксин для реализации медиа запросов.
// при указании точки перелома (девайса) применяется минимальная ширина для
// него.
@mixin mq($device, $type: min) {
  @if map_has_key($breakpoints, $device) {
    @if $device == 'retina' {
      @media only screen and (min-device-pixel-ratio: 2),
        (min-resolution: 192dpi),
        (min-resolution: 2dppx) {
        @content;
      }
      // how to apply
      // @include mq(retina) {
      //   background-image: url('../images/body/bg-icecreem-480@2x.jpg');
      // }
    }
    $width: map_get($breakpoints, $device);
    @if $type == max {
      $width: $width - 0.02;
      // если указан $type: max то от ширины автоматически отнимется 0.02 пикселя.
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}
// пример применения:
// @include mq(desktop) {
//    @include fonts($fs: 16px, $lh: 28px);
// }

// fonts mixin
// миксин для стилей текстового контента. По умолчанию указаны самые
// распространенные на проекте стили, все можно точечно менять по
// необходимости.
@mixin fonts(
  $fst: normal,
  $fw: false,
  $fs: 14px,
  $lh: false,
  $ls: 0.04em,
  $tt: false,
  $cl: false
) {
  @if $fst {
    font-style: $fst;
  }
  @if $fw {
    font-weight: $fw;
  }

  @if $fs {
    font-size: $fs;
  }

  @if $lh {
    line-height: decimal-round(calc($lh / $fs));
  }

  @if $ls {
    letter-spacing: $ls;
  }

  @if $tt {
    text-transform: $tt;
  }

  @if $cl {
    color: $cl;
  }
}
// пример применения:
// @include fonts($fs: 22px, $lh: 27px);
// в примере изменится размер шрифта и пересчитается величина
// пространства между строками.

// mixin buttons
@mixin buttons(
  $width-btn: 108px,
  $font-size-btn: 14px,
  $backgr-color: getColor('basic-yellow')
) {
  width: $width-btn;
  height: 42px;
  font: inherit;
  color: getColor('sec-black');
  font-weight: 600;
  font-size: $font-size-btn;
  line-height: 1.28;
  border-radius: 10px;
  border-color: transparent;

  &:focus {
    color: getColor('sec-white');
  }
  &:focus-visible {
    outline: none;
  }
  @if ($backgr-color == getColor('basic-yellow')) {
    background-color: getColor('basic-yellow');
    border: none;

    &:hover,
    &:focus {
      background-color: getColor('ellipse-green');
    }

    &:disabled {
      background-color: getColor('basic-grey');
    }
  } @else {
    background-color: transparent;
    border: 2px solid getColor('basic-yellow');

    &:hover,
    &:focus {
      border-color: getColor('ellipse-green');
    }

    &:disabled {
      border-color: getColor('basic-grey');
    }
  }
}

// transitions mixin
// миксин для правного перехода

@mixin transitions($properties...) {
  transition-property: $properties;
  transition-duration: 250ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

// пример применения:
// @include transitions (background-color, fill, color);
// указывается только то или те элементы, которые будут изменяться,
// те, которые указаны в transition-property:
